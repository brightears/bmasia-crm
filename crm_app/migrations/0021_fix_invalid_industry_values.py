# Generated by Claude Code on 2025-09-30

from django.db import migrations


def fix_invalid_industry_values(apps, schema_editor):
    """
    Fix invalid industry values that were saved before frontend validation fix.

    Before the fix, the frontend was sending display names like 'Hotels & Resorts'
    instead of database keys like 'Hotels'. This migration maps them to correct values.
    """
    Company = apps.get_model('crm_app', 'Company')

    # Mapping of old display values to correct database keys
    industry_mapping = {
        'Hotels & Resorts': 'Hotels',
        'Hospitality & Tourism': 'Hotels',  # Generic category that might have been used
        'Shopping Malls': 'Malls',
        'Offices & Corporate': 'Offices',
        'Corporate Offices': 'Offices',
        'Hospitals & Medical': 'Hospitals',
        'Healthcare': 'Hospitals',
        'Spas & Wellness': 'Spas',
        'Fitness & Wellness': 'Gyms',
        'Fun Parks & Entertainment': 'Fun Parks',
        'Entertainment': 'Fun Parks',
        'Cafes & Coffee Shops': 'Cafes',
        'Gyms & Fitness Centers': 'Gyms',
        'Salons & Beauty': 'Salons',
        'Banks & Financial': 'Banks',
        'Financial Services': 'Banks',
        'Restaurant & Food Service': 'Restaurants',
        'Bars & Nightlife': 'Bars',
        'Retail Fashion': 'Retail Fashion',  # These are already correct
        'Retail Food': 'Retail Food',
        'Retail': 'Retail Fashion',  # Generic retail
        'Quick Service Restaurants': 'Quick Service Restaurants',
        'Transportation': 'Other',
        'Manufacturing': 'Other',
        'Technology': 'Other',
        'Government': 'Other',
        'Non-profit': 'Other',
        'Education': 'Other',
        'Real Estate': 'Other',
    }

    # Get all companies
    companies = Company.objects.all()
    updated_count = 0

    for company in companies:
        if company.industry in industry_mapping:
            old_value = company.industry
            new_value = industry_mapping[old_value]
            company.industry = new_value
            company.save(update_fields=['industry'])
            updated_count += 1
            print(f"Updated {company.name}: '{old_value}' → '{new_value}'")
        elif company.industry and company.industry not in [
            'Hotels', 'Restaurants', 'Bars', 'Quick Service Restaurants',
            'Retail Fashion', 'Retail Food', 'Malls', 'Offices', 'Hospitals',
            'Spas', 'Fun Parks', 'Cafes', 'Gyms', 'Salons', 'Banks', 'Other'
        ]:
            # Any other unrecognized value gets set to 'Other'
            old_value = company.industry
            company.industry = 'Other'
            company.save(update_fields=['industry'])
            updated_count += 1
            print(f"Updated {company.name}: '{old_value}' (unrecognized) → 'Other'")

    print(f"\nMigration complete: Updated {updated_count} companies")


def reverse_fix(apps, schema_editor):
    """
    Reverse migration - not applicable as we can't reliably reverse
    the mapping without losing information about what the original value was.
    """
    print("Reverse migration not implemented - original invalid values cannot be restored")


class Migration(migrations.Migration):

    dependencies = [
        ('crm_app', '0020_optimize_database_performance'),
    ]

    operations = [
        migrations.RunPython(fix_invalid_industry_values, reverse_fix),
    ]